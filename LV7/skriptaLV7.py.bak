import vtk 
import time
from vtkmodules.vtkCommonDataModel import vtkPolyData
from vtkmodules.vtkCommonDataModel import vtkIterativeClosestPointTransform 
from vtkmodules.vtkFiltersGeneral import vtkTransformPolyDataFilter
from vtkmodules.vtkIOPLY import vtkPLYReader
from vtkmodules.vtkRenderingCore import vtkRenderer
import vtkmodules.vtkRenderingCore

icp = vtkIterativeClosestPointTransform()
icp.SetSource(sourcePD) #Ulazni objekt (početna poza objekta)
icp.SetTarget(targetPD) #Konačni objekt (željena poza objekta)
icp.GetLandmarkTransform().SetModeToRigidBody() #Potrebni način rada je transformacija za kruta tijela
icp.SetMaximumNumberOfIterations(20) #Željeni broj iteracija
icp.SetMaximumNumberOfLandmarks(1000) #Koliko parova točaka da se koristi prilikom minimiziranja cost funkcije
icp.Update() #Provedi algoritam
icpTransformFilter = vtkTransformPolyDataFilter()
icpTransformFilter.SetInputData(source) #Objekt s početnim koordinatama
icpTransformFilter.SetTransform(icp) #transformiramo na novi položaj koristeći transformacijsku matricu
icpTransformFilter.Update()
icpResultPD = icpTransformFilter.GetOutput() #Transformirani (novi) objekt